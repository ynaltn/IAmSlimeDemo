//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/NewInput/CannonControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CannonControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CannonControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CannonControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""6bf6c03e-6c79-496c-b52d-838787f0e764"",
            ""actions"": [
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cbd613fb-5809-49cd-adf4-470f4f026cbd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c77993ec-b803-4205-a821-cdb54834dad9"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""2f6b864c-e53c-4830-a733-cc1e3ee6c63c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7eec945a-d69b-464d-a902-f1e1dc0d254f"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0d1bb723-32c5-4670-ba40-8c93dd405254"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9379c6f8-037c-41eb-989f-743cf4d45b30"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2fee3ae-607f-44da-aa02-4ee79906ade8"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CannonActions"",
            ""id"": ""24d386c0-b015-4988-bca8-cca3a7991f9a"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""25c0373c-837b-4856-8873-8b6393898c56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RevertToSlime"",
                    ""type"": ""Button"",
                    ""id"": ""5bbbef58-511f-406f-9ffe-168360295542"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27d2b5d3-af35-45ad-94e3-9fa32b48d954"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f58a51bc-c320-4d52-93ad-a2ec56b8bd18"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29e3ec1e-57a2-461b-98eb-b6a5d80f9204"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevertToSlime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc3fb3ab-3534-4c7a-8bb2-8d602ea55d67"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevertToSlime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Camera = m_Movement.FindAction("Camera", throwIfNotFound: true);
        // CannonActions
        m_CannonActions = asset.FindActionMap("CannonActions", throwIfNotFound: true);
        m_CannonActions_Shoot = m_CannonActions.FindAction("Shoot", throwIfNotFound: true);
        m_CannonActions_RevertToSlime = m_CannonActions.FindAction("RevertToSlime", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Camera;
    public struct MovementActions
    {
        private @CannonControls m_Wrapper;
        public MovementActions(@CannonControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera => m_Wrapper.m_Movement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // CannonActions
    private readonly InputActionMap m_CannonActions;
    private List<ICannonActionsActions> m_CannonActionsActionsCallbackInterfaces = new List<ICannonActionsActions>();
    private readonly InputAction m_CannonActions_Shoot;
    private readonly InputAction m_CannonActions_RevertToSlime;
    public struct CannonActionsActions
    {
        private @CannonControls m_Wrapper;
        public CannonActionsActions(@CannonControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_CannonActions_Shoot;
        public InputAction @RevertToSlime => m_Wrapper.m_CannonActions_RevertToSlime;
        public InputActionMap Get() { return m_Wrapper.m_CannonActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CannonActionsActions set) { return set.Get(); }
        public void AddCallbacks(ICannonActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_CannonActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CannonActionsActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @RevertToSlime.started += instance.OnRevertToSlime;
            @RevertToSlime.performed += instance.OnRevertToSlime;
            @RevertToSlime.canceled += instance.OnRevertToSlime;
        }

        private void UnregisterCallbacks(ICannonActionsActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @RevertToSlime.started -= instance.OnRevertToSlime;
            @RevertToSlime.performed -= instance.OnRevertToSlime;
            @RevertToSlime.canceled -= instance.OnRevertToSlime;
        }

        public void RemoveCallbacks(ICannonActionsActions instance)
        {
            if (m_Wrapper.m_CannonActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICannonActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_CannonActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CannonActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CannonActionsActions @CannonActions => new CannonActionsActions(this);
    public interface IMovementActions
    {
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface ICannonActionsActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnRevertToSlime(InputAction.CallbackContext context);
    }
}
