//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/NewInput/IntObjectControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IntObjectControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IntObjectControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IntObjectControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""32f0111e-b445-4746-8b47-92a5e89caa14"",
            ""actions"": [
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0faa75ff-9c1a-4328-874d-b341a2e70dc5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""INTMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""06924f1a-6e56-465c-a17c-3954860474c5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f38ad04-3994-4bfc-8fa5-f39504acf8f2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Right Stick"",
                    ""id"": ""17cc5d51-f0d8-4939-b20c-2cb908985da1"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f105dd54-2e5c-4979-8445-4768bd102984"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""821127eb-7d5e-4435-bf0d-70fabe09417b"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6d799e01-6f22-475b-a851-03a62c90223c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0e60835c-267a-4275-8c96-2c1ae443eb20"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyBoard"",
                    ""id"": ""51fa70cd-e02a-4f8f-9b92-82309af51a12"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1abd222d-cca7-4c73-80f1-c9df0953bb3a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3544e92d-6626-44ac-b1d4-de7d1983aa78"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""07a09b4a-2505-4467-8689-f2acc5e66b11"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""30062260-f6ee-4d53-83c3-e5b5b4d14cbd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""dd8d926f-7df9-42cc-8af8-706f4500b683"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f92340d-a483-4abe-9811-eb328574d43e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1dc58ad3-515c-4cd8-803c-8b56429d3d1b"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0948ed40-c5b8-4cc0-878c-aeadb2654fa6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3addaf6-4b4d-4199-b1c3-328fbe9c805d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INTMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ObjectActions"",
            ""id"": ""6e565de7-96b3-4f08-91ea-0854adc56992"",
            ""actions"": [
                {
                    ""name"": ""R1"",
                    ""type"": ""Button"",
                    ""id"": ""7c06fa87-439d-490c-b2df-12f4704af705"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RevertToSlime"",
                    ""type"": ""Button"",
                    ""id"": ""55b60322-96d1-4232-a604-19c5c24a9a9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c76d951-8312-4965-952c-7c8ba1893f19"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90875729-cdd8-46fb-83b8-9eaa4ec6b0f3"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f35c180-6a26-4ad4-b1a6-46cea04624d7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevertToSlime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dca7c9a-910c-4d9a-b481-6d98e72d3cec"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevertToSlime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Camera = m_Movement.FindAction("Camera", throwIfNotFound: true);
        m_Movement_INTMovement = m_Movement.FindAction("INTMovement", throwIfNotFound: true);
        // ObjectActions
        m_ObjectActions = asset.FindActionMap("ObjectActions", throwIfNotFound: true);
        m_ObjectActions_R1 = m_ObjectActions.FindAction("R1", throwIfNotFound: true);
        m_ObjectActions_RevertToSlime = m_ObjectActions.FindAction("RevertToSlime", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Camera;
    private readonly InputAction m_Movement_INTMovement;
    public struct MovementActions
    {
        private @IntObjectControls m_Wrapper;
        public MovementActions(@IntObjectControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera => m_Wrapper.m_Movement_Camera;
        public InputAction @INTMovement => m_Wrapper.m_Movement_INTMovement;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @INTMovement.started += instance.OnINTMovement;
            @INTMovement.performed += instance.OnINTMovement;
            @INTMovement.canceled += instance.OnINTMovement;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @INTMovement.started -= instance.OnINTMovement;
            @INTMovement.performed -= instance.OnINTMovement;
            @INTMovement.canceled -= instance.OnINTMovement;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // ObjectActions
    private readonly InputActionMap m_ObjectActions;
    private List<IObjectActionsActions> m_ObjectActionsActionsCallbackInterfaces = new List<IObjectActionsActions>();
    private readonly InputAction m_ObjectActions_R1;
    private readonly InputAction m_ObjectActions_RevertToSlime;
    public struct ObjectActionsActions
    {
        private @IntObjectControls m_Wrapper;
        public ObjectActionsActions(@IntObjectControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @R1 => m_Wrapper.m_ObjectActions_R1;
        public InputAction @RevertToSlime => m_Wrapper.m_ObjectActions_RevertToSlime;
        public InputActionMap Get() { return m_Wrapper.m_ObjectActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ObjectActionsActions set) { return set.Get(); }
        public void AddCallbacks(IObjectActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ObjectActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ObjectActionsActionsCallbackInterfaces.Add(instance);
            @R1.started += instance.OnR1;
            @R1.performed += instance.OnR1;
            @R1.canceled += instance.OnR1;
            @RevertToSlime.started += instance.OnRevertToSlime;
            @RevertToSlime.performed += instance.OnRevertToSlime;
            @RevertToSlime.canceled += instance.OnRevertToSlime;
        }

        private void UnregisterCallbacks(IObjectActionsActions instance)
        {
            @R1.started -= instance.OnR1;
            @R1.performed -= instance.OnR1;
            @R1.canceled -= instance.OnR1;
            @RevertToSlime.started -= instance.OnRevertToSlime;
            @RevertToSlime.performed -= instance.OnRevertToSlime;
            @RevertToSlime.canceled -= instance.OnRevertToSlime;
        }

        public void RemoveCallbacks(IObjectActionsActions instance)
        {
            if (m_Wrapper.m_ObjectActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IObjectActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ObjectActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ObjectActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ObjectActionsActions @ObjectActions => new ObjectActionsActions(this);
    public interface IMovementActions
    {
        void OnCamera(InputAction.CallbackContext context);
        void OnINTMovement(InputAction.CallbackContext context);
    }
    public interface IObjectActionsActions
    {
        void OnR1(InputAction.CallbackContext context);
        void OnRevertToSlime(InputAction.CallbackContext context);
    }
}
